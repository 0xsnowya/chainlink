// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ocr2_vrf_wrapper

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
	"github.com/smartcontractkit/chainlink/core/internal/gethwrappers/generated"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

type ECCArithmeticG1Point struct {
	P [2]*big.Int
}

type ECCArithmeticG2Point struct {
	P [4]*big.Int
}

type HashToCurveFProof struct {
	DenomInv    *big.Int
	TInvSquared *big.Int
	Y1          *big.Int
	Y2          *big.Int
	Y3          *big.Int
}

type KeyDataStructKeyData struct {
	PublicKey []byte
	Hashes    [][32]byte
}

type VRFProof struct {
	PubKey ECCArithmeticG2Point
	Output ECCArithmeticG1Point
	F1     HashToCurveFProof
	F2     HashToCurveFProof
}

type VRFRequest struct {
	RequestID [32]byte
	Seed      *big.Int
	NumWords  uint32
	Sender    common.Address
}

var VRFMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractDKG\",\"name\":\"_keyProvider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousConfigBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"configCount\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"transmitters\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"f\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"onchainConfig\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"offchainConfigVersion\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"offchainConfig\",\"type\":\"bytes\"}],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"output\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"name\":\"Transmitted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"}],\"name\":\"bytesToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"internalType\":\"structVRF.Request\",\"name\":\"r\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[4]\",\"name\":\"p\",\"type\":\"uint256[4]\"}],\"internalType\":\"structECCArithmetic.G2Point\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"internalType\":\"structECCArithmetic.G1Point\",\"name\":\"output\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"denomInv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tInvSquared\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y3\",\"type\":\"uint256\"}],\"internalType\":\"structHashToCurve.FProof\",\"name\":\"f1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"denomInv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tInvSquared\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y3\",\"type\":\"uint256\"}],\"internalType\":\"structHashToCurve.FProof\",\"name\":\"f2\",\"type\":\"tuple\"}],\"internalType\":\"structVRF.Proof\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"m\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"denomInv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tInvSquared\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y3\",\"type\":\"uint256\"}],\"internalType\":\"structHashToCurve.FProof\",\"name\":\"f1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"denomInv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tInvSquared\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y3\",\"type\":\"uint256\"}],\"internalType\":\"structHashToCurve.FProof\",\"name\":\"f2\",\"type\":\"tuple\"}],\"name\":\"hashToCurve\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"internalType\":\"structECCArithmetic.G1Point\",\"name\":\"hashPoint\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"}],\"internalType\":\"structKeyDataStruct.KeyData\",\"name\":\"kd\",\"type\":\"tuple\"}],\"name\":\"keyGenerated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDetails\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"configCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestConfigDigestAndEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"scanLogs\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"configDigest\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newKeyRequested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_keyID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_provingKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_transmitters\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_f\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_onchainConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_offchainConfigVersion\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_offchainConfig\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_uint8\",\"type\":\"uint8\"}],\"name\":\"toASCII\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[3]\",\"name\":\"reportContext\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"}],\"name\":\"transmitVRFResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"input\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[4]\",\"name\":\"p\",\"type\":\"uint256[4]\"}],\"internalType\":\"structECCArithmetic.G2Point\",\"name\":\"pubKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"internalType\":\"structECCArithmetic.G1Point\",\"name\":\"output\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"denomInv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tInvSquared\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y3\",\"type\":\"uint256\"}],\"internalType\":\"structHashToCurve.FProof\",\"name\":\"f1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"denomInv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tInvSquared\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y3\",\"type\":\"uint256\"}],\"internalType\":\"structHashToCurve.FProof\",\"name\":\"f2\",\"type\":\"tuple\"}],\"internalType\":\"structVRF.Proof\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"vrfOutput\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"output\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200455638038062004556833981016040819052620000349162000196565b33806000816200008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615620000be57620000be81620000eb565b5050600280546001600160a01b0319166001600160a01b03949094169390931790925560035550620001d2565b336001600160a01b03821603620001455760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000082565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008060408385031215620001aa57600080fd5b82516001600160a01b0381168114620001c257600080fd5b6020939093015192949293505050565b61437480620001e26000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80639201de55116100d8578063bf2732c71161008c578063e3d0e71211610066578063e3d0e71214610356578063e95d957714610369578063f2fde38b1461038957600080fd5b8063bf2732c714610331578063cc31f7dd14610344578063d57fc45a1461034d57600080fd5b8063afcb95d7116100bd578063afcb95d7146102dc578063b1dc65a414610306578063bf0e15c61461031e57600080fd5b80639201de55146102b6578063a954b4ef146102c957600080fd5b806339614e4f1161012f57806379ba50971161011457806379ba50971461025957806381ff7048146102615780638da5cb5b1461028e57600080fd5b806339614e4f1461023e57806355e487491461025157600080fd5b80630bc643e8116101605780630bc643e8146101b75780630e3ca2a7146101dc578063181f5a77146101fc57600080fd5b8063012cfe861461017c578063092576f714610191575b600080fd5b61018f61018a36600461331b565b61039c565b005b6101a461019f366004613381565b610546565b6040519081526020015b60405180910390f35b6101ca6101c53660046133c2565b6106bd565b60405160ff90911681526020016101ae565b6101a46101ea3660046133ff565b60056020526000908152604090205481565b60408051808201909152600981527f56524620302e302e31000000000000000000000000000000000000000000000060208201525b6040516101ae9190613496565b61023161024c366004613647565b6106e6565b61018f610898565b61018f610920565b600a54600854604080516000815264010000000090930463ffffffff1660208401528201526060016101ae565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ae565b6102316102c4366004613684565b610a1d565b61018f6102d7366004613822565b610ac1565b6008546007546040805160008152602081019390935263ffffffff909116908201526060016101ae565b61018f6103143660046138df565b5050505050505050565b6101a461032c366004613992565b610d7c565b61018f61033f3660046139db565b610f97565b6101a460035481565b6101a460045481565b61018f610364366004613b50565b611066565b61037c610377366004613c1d565b611a4c565b6040516101ae9190613c5c565b61018f6103973660046133ff565b611a9a565b60045460009061040d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6e6f206b657920617661696c61626c650000000000000000000000000000000060448201526064015b60405180910390fd5b60005a604080516020601f8701819004810282018101909252858152919250863591818801359161045d9184918491908a908a9081908401838280828437600092019190915250611aae92505050565b6040805183815263ffffffff600884901c1660208201527fb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62910160405180910390a16040805160608101825260085480825260095460ff80821660208501526101009091041692820192909252908314610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f636f6e666967446967657374206d69736d6174636800000000000000000000006044820152606401610404565b63ffffffff841061031457610314613cb5565b6040805160808101825260008082526020808301828152838501838152336060808701828152918652600585528786205460035492518951921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682870152603482018390526054808301829052895180840390910181526074909201909852805194019390932085529087905263ffffffff861690529092906105ea83611b18565b83516000908152600660209081526040918290209290925584519185015181860151606087015192517fda543d8fd5d52cb865899d85adee45422306c16f47e6e4394f043006ff5cde30946106749490939291938452602084019290925263ffffffff16604083015273ffffffffffffffffffffffffffffffffffffffff16606082015260800190565b60405180910390a1610687826001613d13565b606084015173ffffffffffffffffffffffffffffffffffffffff1660009081526005602052604090205550505190505b92915050565b6000600a8260ff1610156106d6576106b7826030613d2b565b6106b7826057613d2b565b919050565b6060600080835160026106f99190613d50565b67ffffffffffffffff811115610711576107116134a9565b6040519080825280601f01601f19166020018201604052801561073b576020820181803683370190505b509050600091505b80518260ff1610156108915760008461075d600285613dbc565b60ff168151811061077057610770613c86565b60209101015160f81c600f169050600060048661078e600287613dbc565b60ff16815181106107a1576107a1613c86565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016901c60f81c90506107d8816106bd565b60f81b838560ff16815181106107f0576107f0613c86565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061082a846001613d2b565b9350610835826106bd565b60f81b838560ff168151811061084d5761084d613c86565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505050818061088990613dde565b925050610743565b9392505050565b60025473ffffffffffffffffffffffffffffffffffffffff163314610919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f6b657920696e666f206d75737420636f6d652066726f6d2070726f76696465726044820152606401610404565b6000600455565b60015473ffffffffffffffffffffffffffffffffffffffff1633146109a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152606401610404565b60008054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6040805160208082528183019092526060916000919060208201818036833701905050905060005b6020811015610ab757838160208110610a6057610a60613c86565b1a60f81b828281518110610a7657610a76613c86565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610aaf81613dfd565b915050610a45565b50610891816106e6565b815160009081526006602052604081205490610adc84611b18565b9050808214610b47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f72657175657374206c6f6f6b7570206661696c656400000000000000000000006044820152606401610404565b6000610b538385610d7c565b85516000908152600660205260408082208290558701519192509063ffffffff1667ffffffffffffffff811115610b8c57610b8c6134a9565b604051908082528060200260200182016040528015610bb5578160200160208202803683370190505b50905060005b866040015163ffffffff16811015610c295760408051602081018590529081018290526060016040516020818303038152906040528051906020012060001c828281518110610c0c57610c0c613c86565b602090810291909101015280610c2181613dfd565b915050610bbb565b50606086015186516040517f75bf929b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216916375bf929b91610c84918590600401613e70565b600060405180830381600087803b158015610c9e57600080fd5b505af1925050508015610caf575060015b610d28573d808015610cdd576040519150601f19603f3d011682016040523d82523d6000602084013e610ce2565b606091505b5086516040517fa7231a311a37fec0b9b631c5b7d4c4aa3effe5304f25dbfeaf0de676cdd715ba90610d1a9085906000908690613e89565b60405180910390a250610d74565b8551604080516000815260208101918290527fa7231a311a37fec0b9b631c5b7d4c4aa3effe5304f25dbfeaf0de676cdd715ba91610d6b91859160019190613e89565b60405180910390a25b505050505050565b60045481515160405160009291610d9591602001613eb6565b6040516020818303038152906040528051906020012014610e12576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f77726f6e67207075626c6963206b6579000000000000000000000000000000006044820152606401610404565b6000610e278484604001518560600151611a4c565b9050610e3c8184602001518560000151611bdf565b610ea2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f626164205652462070726f6f66000000000000000000000000000000000000006044820152606401610404565b602083015151517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47118015610efe57506020838101515101517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47115b610f64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f62616420726570726573656e746174696f6e206f66206f7574707574207074006044820152606401610404565b60208084015151604051610f789201613eea565b6040516020818303038152906040528051906020012091505092915050565b60025473ffffffffffffffffffffffffffffffffffffffff163314611018576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f6b657920696e666f206d75737420636f6d652066726f6d2070726f76696465726044820152606401610404565b805160405161102a9190602001613f1e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012060045550565b855185518560ff16601f8311156110d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f746f6f206d616e79207369676e657273000000000000000000000000000000006044820152606401610404565b60008111611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f66206d75737420626520706f73697469766500000000000000000000000000006044820152606401610404565b8183146111d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f6f7261636c6520616464726573736573206f7574206f6620726567697374726160448201527f74696f6e000000000000000000000000000000000000000000000000000000006064820152608401610404565b6111dc816003613d50565b8311611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f6661756c74792d6f7261636c65206620746f6f206869676800000000000000006044820152606401610404565b61124c611dda565b60006040518060c001604052808b81526020018a81526020018960ff1681526020018881526020018767ffffffffffffffff1681526020018681525090505b600c541561144057600c546000906112a590600190613f3a565b90506000600c82815481106112bc576112bc613c86565b6000918252602082200154600d805473ffffffffffffffffffffffffffffffffffffffff909216935090849081106112f6576112f6613c86565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff8581168452600b909252604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090811690915592909116808452922080549091169055600c8054919250908061137657611376613f51565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055600d8054806113df576113df613f51565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690550190555061128b915050565b60005b8151518110156118a7576000600b60008460000151848151811061146957611469613c86565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff1660028111156114b3576114b3613f80565b1461151a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f7265706561746564207369676e657220616464726573730000000000000000006044820152606401610404565b6040805180820190915260ff821681526001602082015282518051600b916000918590811061154b5761154b613c86565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016176101008360028111156115ec576115ec613f80565b0217905550600091506115fc9050565b600b60008460200151848151811061161657611616613c86565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff16825281019190915260400160002054610100900460ff16600281111561166057611660613f80565b146116c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f7265706561746564207472616e736d69747465722061646472657373000000006044820152606401610404565b6040805180820190915260ff82168152602081016002815250600b6000846020015184815181106116fa576116fa613c86565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252818101929092526040016000208251815460ff9091167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082168117835592840151919283917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000161761010083600281111561179b5761179b613f80565b02179055505082518051600c9250839081106117b9576117b9613c86565b602090810291909101810151825460018101845560009384529282902090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909316929092179091558201518051600d91908390811061183557611835613c86565b60209081029190910181015182546001810184556000938452919092200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9092169190911790558061189f81613dfd565b915050611443565b506040810151600980547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055600a80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffff811664010000000063ffffffff438116820292831785559083048116936001939092600092611939928692908216911617613faf565b92506101000a81548163ffffffff021916908363ffffffff1602179055506119984630600a60009054906101000a900463ffffffff1663ffffffff16856000015186602001518760400151886060015189608001518a60a00151611e5d565b6008819055825180516009805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055600a5460208501516040808701516060880151608089015160a08a015193517f1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e0598611a37988b98919763ffffffff90921696909591949193919261401d565b60405180910390a15050505050505050505050565b611a5461323c565b6000611a5f85611f08565b90506000611a7482825b602002015186612068565b90506000611a83836001611a69565b9050611a8f8282612b44565b979650505050505050565b611aa2611dda565b611aab81612bd6565b50565b60008082806020019051810190611ac59190614157565b91509150611ad38282610ac1565b50506007805460089390931c63ffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000909316929092179091555050565b5050565b6000808260000151836020015184604001518560600151604051602001611ba29493929190938452602084019290925260e01b7fffffffff0000000000000000000000000000000000000000000000000000000016604083015260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016604482015260580190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b60408051600280825260608201909252600091829190816020015b611c0261323c565b815260200190600190039081611bfa5750506040805160028082526060820190925291925060009190602082015b611c38613254565b815260200190600190039081611c305750506040805160608101825288515160208083019182528a51015193945090928392830190611c97907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613f3a565b81525081525082600081518110611cb057611cb0613c86565b60200260200101819052508482600181518110611ccf57611ccf613c86565b60200260200101819052508381600081518110611cee57611cee613c86565b6020026020010181905250604051806020016040528060405180608001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa81525081525081600181518110611dbb57611dbb613c86565b6020026020010181905250611dd08282612ccb565b9695505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611e5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610404565b565b6000808a8a8a8a8a8a8a8a8a604051602001611e81999897969594939291906142be565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167e01000000000000000000000000000000000000000000000000000000000000179150509998505050505050505050565b611f10613267565b6000805b600282101561206157604080516020810186905201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190528051602090910120935083611f8d7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476005613d50565b811015611fe357611fbe7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782614353565b848460028110611fd057611fd0613c86565b602002015282611fdf81613dfd565b9350505b81611fed81613dfd565b925050602082111561205b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f617474656d7074656420746f6f206d616e7920686173686573000000000000006044820152606401610404565b50611f14565b5050919050565b61207061323c565b826000036120b45750604080516060810182527759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe602082019081526002928201929092529081526106b7565b6120df7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476005613d50565b8310612147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f74206e6f74206120756e69666f726d2073616d706c65000000000000000000006044820152606401610404565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47848509905060008161217e60036001613d13565b6121889190613d13565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784518209600114612218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f77726f6e6720696e766572736520666f722064656e6f6d0000000000000000006044820152606401610404565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478577b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476122c9837f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613f3a565b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe08905060006122f2600289614353565b90508160007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780858609850908905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408b01518009905081810361249f577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a6040015110612404576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f793120746f6f206c6172676500000000000000000000000000000000000000006044820152606401610404565b8360028b604001516124169190614353565b1461247d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f793120706172697479206d757374206d617463682074277300000000000000006044820152606401610404565b885183905260408a0151895160015b6020020152506106b79650505050505050565b6124c9827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613f3a565b8114612531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f7931213d70736575646f20737172206f662078315e332b4200000000000000006044820152606401610404565b50505060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478061256457612564613d8d565b83600108612592907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613f3a565b905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780858609850908905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760608b01518009905081810361272f577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a60600151106126a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f793220746f6f206c6172676500000000000000000000000000000000000000006044820152606401610404565b8360028b606001516126b59190614353565b1461271c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f793220706172697479206d757374206d617463682074277300000000000000006044820152606401610404565b885183905260608a01518951600161248c565b612759827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613f3a565b81146127c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f7932213d70736575646f20737172206f662078325e332b4200000000000000006044820152606401610404565b5050507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47806127f2576127f2613d8d565b87602001518609600114612862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f74496e76537175617265642a742a2a3220213d3d2031206d6f642050000000006044820152606401610404565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f2042def740cbc01bd03583cf0100e593ba56470b9af68708d2c05d64905353857f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208a01517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478889090909925060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761293f857f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613f3a565b600108905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47808586098509089050807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760808b0151800914612a23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f646964206e6f74206f627461696e206120637572766520706f696e74000000006044820152606401610404565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47896080015110612ab0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f793220746f6f206c6172676500000000000000000000000000000000000000006044820152606401610404565b8260028a60800151612ac29190614353565b14612b29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f793320706172697479206d757374206d617463682074277300000000000000006044820152606401610404565b50865152505050506080929092015181516020015292915050565b612b4c61323c565b6000612b588484612f7c565b80515190915015801590612b70575080516020015115155b610891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f6164646731206661696c65643a207a65726f206f7264696e61746500000000006044820152606401610404565b3373ffffffffffffffffffffffffffffffffffffffff821603612c55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610404565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60008151835114612cdb57600080fd5b82516000612cea826006613d50565b905060008167ffffffffffffffff811115612d0757612d076134a9565b604051908082528060200260200182016040528015612d30578160200160208202803683370190505b50905060005b83811015612f4557868181518110612d5057612d50613c86565b6020908102919091010151515182612d69836006613d50565b612d74906000613d13565b81518110612d8457612d84613c86565b602002602001018181525050868181518110612da257612da2613c86565b60209081029190910181015151015182612dbd836006613d50565b612dc8906001613d13565b81518110612dd857612dd8613c86565b602002602001018181525050858181518110612df657612df6613c86565b6020908102919091010151515182612e0f836006613d50565b612e1a906002613d13565b81518110612e2a57612e2a613c86565b602002602001018181525050858181518110612e4857612e48613c86565b60209081029190910181015151015182612e63836006613d50565b612e6e906003613d13565b81518110612e7e57612e7e613c86565b602002602001018181525050858181518110612e9c57612e9c613c86565b6020908102919091010151516040015182612eb8836006613d50565b612ec3906004613d13565b81518110612ed357612ed3613c86565b602002602001018181525050858181518110612ef157612ef1613c86565b6020908102919091010151516060015182612f0d836006613d50565b612f18906005613d13565b81518110612f2857612f28613c86565b602090810291909101015280612f3d81613dfd565b915050612d36565b50612f4e613285565b6000602082602086026020860160086201b968fa905080612f6e57600080fd5b505115159695505050505050565b612f8461323c565b612f8d8361305a565b612f968261305a565b612f9e6132a3565b83515181528351602090810151828201528351516040830152835101516060820152612fc8613267565b600060408260808560066096fa905080600003613041576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f61646467312063616c6c206661696c65640000000000000000000000000000006044820152606401610404565b5080518351526020908101518351909101525092915050565b8051517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47116130e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f78206e6f7420696e20465f5000000000000000000000000000000000000000006044820152606401610404565b8051602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4711613173576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f79206e6f7420696e20465f5000000000000000000000000000000000000000006044820152606401610404565b8051516000907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790600390829081818009090882516020015190915081907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790800914611b14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f706f696e74206e6f74206f6e20637572766500000000000000000000000000006044820152606401610404565b604051806020016040528061324f613267565b905290565b604051806020016040528061324f6132a3565b60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b80606081018310156106b757600080fd5b60008083601f8401126132e457600080fd5b50813567ffffffffffffffff8111156132fc57600080fd5b60208301915083602082850101111561331457600080fd5b9250929050565b60008060006080848603121561333057600080fd5b61333a85856132c1565b9250606084013567ffffffffffffffff81111561335657600080fd5b613362868287016132d2565b9497909650939450505050565b63ffffffff81168114611aab57600080fd5b6000806040838503121561339457600080fd5b8235915060208301356133a68161336f565b809150509250929050565b803560ff811681146106e157600080fd5b6000602082840312156133d457600080fd5b610891826133b1565b73ffffffffffffffffffffffffffffffffffffffff81168114611aab57600080fd5b60006020828403121561341157600080fd5b8135610891816133dd565b60005b8381101561343757818101518382015260200161341f565b83811115613446576000848401525b50505050565b6000815180845261346481602086016020860161341c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610891602083018461344c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156134fb576134fb6134a9565b60405290565b6040516080810167ffffffffffffffff811182821017156134fb576134fb6134a9565b6040516020810167ffffffffffffffff811182821017156134fb576134fb6134a9565b6040805190810167ffffffffffffffff811182821017156134fb576134fb6134a9565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156135b1576135b16134a9565b604052919050565b600082601f8301126135ca57600080fd5b813567ffffffffffffffff8111156135e4576135e46134a9565b61361560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161356a565b81815284602083860101111561362a57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561365957600080fd5b813567ffffffffffffffff81111561367057600080fd5b61367c848285016135b9565b949350505050565b60006020828403121561369657600080fd5b5035919050565b60006136a7613501565b90508060808301848111156136bb57600080fd5b835b818110156136d55780358352602092830192016136bd565b50505092915050565b60006136e8613547565b90508060408301848111156136bb57600080fd5b600060a0828403121561370e57600080fd5b6137166134d8565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015292915050565b600081830361020081121561375e57600080fd5b613766613501565b9150608081121561377657600080fd5b61377e613524565b84601f85011261378d57600080fd5b613797858561369d565b8152825260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80820112156137cb57600080fd5b506137d4613524565b83609f8401126137e357600080fd5b6137f084608085016136de565b815260208201526138048360c084016136fc565b60408201526138178361016084016136fc565b606082015292915050565b60008082840361028081121561383757600080fd5b608081121561384557600080fd5b5061384e613501565b8335815260208401356020820152604084013561386a8161336f565b6040820152606084013561387d816133dd565b60608201529150613891846080850161374a565b90509250929050565b60008083601f8401126138ac57600080fd5b50813567ffffffffffffffff8111156138c457600080fd5b6020830191508360208260051b850101111561331457600080fd5b60008060008060008060008060e0898b0312156138fb57600080fd5b6139058a8a6132c1565b9750606089013567ffffffffffffffff8082111561392257600080fd5b61392e8c838d016132d2565b909950975060808b013591508082111561394757600080fd5b6139538c838d0161389a565b909750955060a08b013591508082111561396c57600080fd5b506139798b828c0161389a565b999c989b50969995989497949560c00135949350505050565b60008061022083850312156139a657600080fd5b82359150613891846020850161374a565b600067ffffffffffffffff8211156139d1576139d16134a9565b5060051b60200190565b600060208083850312156139ee57600080fd5b823567ffffffffffffffff80821115613a0657600080fd5b9084019060408287031215613a1a57600080fd5b613a22613547565b823582811115613a3157600080fd5b613a3d888286016135b9565b8252508383013582811115613a5157600080fd5b80840193505086601f840112613a6657600080fd5b82359150613a7b613a76836139b7565b61356a565b82815260059290921b83018401918481019088841115613a9a57600080fd5b938501935b83851015613ab857843582529385019390850190613a9f565b948201949094529695505050505050565b600082601f830112613ada57600080fd5b81356020613aea613a76836139b7565b82815260059290921b84018101918181019086841115613b0957600080fd5b8286015b84811015613b2d578035613b20816133dd565b8352918301918301613b0d565b509695505050505050565b803567ffffffffffffffff811681146106e157600080fd5b60008060008060008060c08789031215613b6957600080fd5b863567ffffffffffffffff80821115613b8157600080fd5b613b8d8a838b01613ac9565b97506020890135915080821115613ba357600080fd5b613baf8a838b01613ac9565b9650613bbd60408a016133b1565b95506060890135915080821115613bd357600080fd5b613bdf8a838b016135b9565b9450613bed60808a01613b38565b935060a0890135915080821115613c0357600080fd5b50613c1089828a016135b9565b9150509295509295509295565b60008060006101608486031215613c3357600080fd5b83359250613c4485602086016136fc565b9150613c538560c086016136fc565b90509250925092565b815160408201908260005b60028110156136d5578251825260209283019290910190600101613c67565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613d2657613d26613ce4565b500190565b600060ff821660ff84168060ff03821115613d4857613d48613ce4565b019392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d8857613d88613ce4565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600060ff831680613dcf57613dcf613d8d565b8060ff84160491505092915050565b600060ff821660ff8103613df457613df4613ce4565b60010192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613e2e57613e2e613ce4565b5060010190565b600081518084526020808501945080840160005b83811015613e6557815187529582019590820190600101613e49565b509495945050505050565b82815260406020820152600061367c6040830184613e35565b606081526000613e9c6060830186613e35565b84151560208401528281036040840152611dd0818561344c565b60008183825b6004811015613edb578151835260209283019290910190600101613ebc565b50505060808201905092915050565b60008183825b6002811015613f0f578151835260209283019290910190600101613ef0565b50505060408201905092915050565b60008251613f3081846020870161341c565b9190910192915050565b600082821015613f4c57613f4c613ce4565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600063ffffffff808316818516808303821115613fce57613fce613ce4565b01949350505050565b600081518084526020808501945080840160005b83811015613e6557815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613feb565b600061012063ffffffff808d1684528b6020850152808b1660408501525080606084015261404d8184018a613fd7565b905082810360808401526140618189613fd7565b905060ff871660a084015282810360c084015261407e818761344c565b905067ffffffffffffffff851660e08401528281036101008401526140a3818561344c565b9c9b505050505050505050505050565b60006140bd613501565b90508060808301848111156140d157600080fd5b835b818110156136d55780518352602092830192016140d3565b60006140f5613547565b90508060408301848111156140d157600080fd5b600060a0828403121561411b57600080fd5b6141236134d8565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015292915050565b60008082840361028081121561416c57600080fd5b608081121561417a57600080fd5b614182613501565b8451815260208501516020820152604085015161419e8161336f565b604082015260608501516141b1816133dd565b606082015292507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8081016102008112156141ea57600080fd5b6141f2613501565b608082121561420057600080fd5b614208613524565b915086609f87011261421957600080fd5b61422687608088016140b3565b825281815260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008401121561425b57600080fd5b614263613524565b92508661011f87011261427557600080fd5b6142838761010088016140eb565b8352826020820152614299876101408801614109565b60408201526142ac876101e08801614109565b60608201528093505050509250929050565b60006101208b835273ffffffffffffffffffffffffffffffffffffffff8b16602084015267ffffffffffffffff808b1660408501528160608501526143058285018b613fd7565b91508382036080850152614319828a613fd7565b915060ff881660a085015283820360c0850152614336828861344c565b90861660e085015283810361010085015290506140a3818561344c565b60008261436257614362613d8d565b50069056fea164736f6c634300080f000a",
}

var VRFABI = VRFMetaData.ABI

var VRFBin = VRFMetaData.Bin

func DeployVRF(auth *bind.TransactOpts, backend bind.ContractBackend, _keyProvider common.Address, _keyID [32]byte) (common.Address, *types.Transaction, *VRF, error) {
	parsed, err := VRFMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VRFBin), backend, _keyProvider, _keyID)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VRF{VRFCaller: VRFCaller{contract: contract}, VRFTransactor: VRFTransactor{contract: contract}, VRFFilterer: VRFFilterer{contract: contract}}, nil
}

type VRF struct {
	address common.Address
	abi     abi.ABI
	VRFCaller
	VRFTransactor
	VRFFilterer
}

type VRFCaller struct {
	contract *bind.BoundContract
}

type VRFTransactor struct {
	contract *bind.BoundContract
}

type VRFFilterer struct {
	contract *bind.BoundContract
}

type VRFSession struct {
	Contract     *VRF
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type VRFCallerSession struct {
	Contract *VRFCaller
	CallOpts bind.CallOpts
}

type VRFTransactorSession struct {
	Contract     *VRFTransactor
	TransactOpts bind.TransactOpts
}

type VRFRaw struct {
	Contract *VRF
}

type VRFCallerRaw struct {
	Contract *VRFCaller
}

type VRFTransactorRaw struct {
	Contract *VRFTransactor
}

func NewVRF(address common.Address, backend bind.ContractBackend) (*VRF, error) {
	abi, err := abi.JSON(strings.NewReader(VRFABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindVRF(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VRF{address: address, abi: abi, VRFCaller: VRFCaller{contract: contract}, VRFTransactor: VRFTransactor{contract: contract}, VRFFilterer: VRFFilterer{contract: contract}}, nil
}

func NewVRFCaller(address common.Address, caller bind.ContractCaller) (*VRFCaller, error) {
	contract, err := bindVRF(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VRFCaller{contract: contract}, nil
}

func NewVRFTransactor(address common.Address, transactor bind.ContractTransactor) (*VRFTransactor, error) {
	contract, err := bindVRF(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VRFTransactor{contract: contract}, nil
}

func NewVRFFilterer(address common.Address, filterer bind.ContractFilterer) (*VRFFilterer, error) {
	contract, err := bindVRF(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VRFFilterer{contract: contract}, nil
}

func bindVRF(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(VRFABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

func (_VRF *VRFRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VRF.Contract.VRFCaller.contract.Call(opts, result, method, params...)
}

func (_VRF *VRFRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRF.Contract.VRFTransactor.contract.Transfer(opts)
}

func (_VRF *VRFRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VRF.Contract.VRFTransactor.contract.Transact(opts, method, params...)
}

func (_VRF *VRFCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VRF.Contract.contract.Call(opts, result, method, params...)
}

func (_VRF *VRFTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRF.Contract.contract.Transfer(opts)
}

func (_VRF *VRFTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VRF.Contract.contract.Transact(opts, method, params...)
}

func (_VRF *VRFCaller) Bytes32ToString(opts *bind.CallOpts, s [32]byte) (string, error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "bytes32ToString", s)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_VRF *VRFSession) Bytes32ToString(s [32]byte) (string, error) {
	return _VRF.Contract.Bytes32ToString(&_VRF.CallOpts, s)
}

func (_VRF *VRFCallerSession) Bytes32ToString(s [32]byte) (string, error) {
	return _VRF.Contract.Bytes32ToString(&_VRF.CallOpts, s)
}

func (_VRF *VRFCaller) BytesToString(opts *bind.CallOpts, _bytes []byte) (string, error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "bytesToString", _bytes)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_VRF *VRFSession) BytesToString(_bytes []byte) (string, error) {
	return _VRF.Contract.BytesToString(&_VRF.CallOpts, _bytes)
}

func (_VRF *VRFCallerSession) BytesToString(_bytes []byte) (string, error) {
	return _VRF.Contract.BytesToString(&_VRF.CallOpts, _bytes)
}

func (_VRF *VRFCaller) HashToCurve(opts *bind.CallOpts, m [32]byte, f1 HashToCurveFProof, f2 HashToCurveFProof) (ECCArithmeticG1Point, error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "hashToCurve", m, f1, f2)

	if err != nil {
		return *new(ECCArithmeticG1Point), err
	}

	out0 := *abi.ConvertType(out[0], new(ECCArithmeticG1Point)).(*ECCArithmeticG1Point)

	return out0, err

}

func (_VRF *VRFSession) HashToCurve(m [32]byte, f1 HashToCurveFProof, f2 HashToCurveFProof) (ECCArithmeticG1Point, error) {
	return _VRF.Contract.HashToCurve(&_VRF.CallOpts, m, f1, f2)
}

func (_VRF *VRFCallerSession) HashToCurve(m [32]byte, f1 HashToCurveFProof, f2 HashToCurveFProof) (ECCArithmeticG1Point, error) {
	return _VRF.Contract.HashToCurve(&_VRF.CallOpts, m, f1, f2)
}

func (_VRF *VRFCaller) LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

	error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "latestConfigDetails")

	outstruct := new(LatestConfigDetails)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ConfigCount = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.BlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.ConfigDigest = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

func (_VRF *VRFSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _VRF.Contract.LatestConfigDetails(&_VRF.CallOpts)
}

func (_VRF *VRFCallerSession) LatestConfigDetails() (LatestConfigDetails,

	error) {
	return _VRF.Contract.LatestConfigDetails(&_VRF.CallOpts)
}

func (_VRF *VRFCaller) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

	error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "latestConfigDigestAndEpoch")

	outstruct := new(LatestConfigDigestAndEpoch)
	if err != nil {
		return *outstruct, err
	}

	outstruct.ScanLogs = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ConfigDigest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.Epoch = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

func (_VRF *VRFSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _VRF.Contract.LatestConfigDigestAndEpoch(&_VRF.CallOpts)
}

func (_VRF *VRFCallerSession) LatestConfigDigestAndEpoch() (LatestConfigDigestAndEpoch,

	error) {
	return _VRF.Contract.LatestConfigDigestAndEpoch(&_VRF.CallOpts)
}

func (_VRF *VRFCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_VRF *VRFSession) Owner() (common.Address, error) {
	return _VRF.Contract.Owner(&_VRF.CallOpts)
}

func (_VRF *VRFCallerSession) Owner() (common.Address, error) {
	return _VRF.Contract.Owner(&_VRF.CallOpts)
}

func (_VRF *VRFCaller) SKeyID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "s_keyID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_VRF *VRFSession) SKeyID() ([32]byte, error) {
	return _VRF.Contract.SKeyID(&_VRF.CallOpts)
}

func (_VRF *VRFCallerSession) SKeyID() ([32]byte, error) {
	return _VRF.Contract.SKeyID(&_VRF.CallOpts)
}

func (_VRF *VRFCaller) SNonce(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "s_nonce", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_VRF *VRFSession) SNonce(arg0 common.Address) (*big.Int, error) {
	return _VRF.Contract.SNonce(&_VRF.CallOpts, arg0)
}

func (_VRF *VRFCallerSession) SNonce(arg0 common.Address) (*big.Int, error) {
	return _VRF.Contract.SNonce(&_VRF.CallOpts, arg0)
}

func (_VRF *VRFCaller) SProvingKeyHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "s_provingKeyHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_VRF *VRFSession) SProvingKeyHash() ([32]byte, error) {
	return _VRF.Contract.SProvingKeyHash(&_VRF.CallOpts)
}

func (_VRF *VRFCallerSession) SProvingKeyHash() ([32]byte, error) {
	return _VRF.Contract.SProvingKeyHash(&_VRF.CallOpts)
}

func (_VRF *VRFCaller) ToASCII(opts *bind.CallOpts, _uint8 uint8) (uint8, error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "toASCII", _uint8)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

func (_VRF *VRFSession) ToASCII(_uint8 uint8) (uint8, error) {
	return _VRF.Contract.ToASCII(&_VRF.CallOpts, _uint8)
}

func (_VRF *VRFCallerSession) ToASCII(_uint8 uint8) (uint8, error) {
	return _VRF.Contract.ToASCII(&_VRF.CallOpts, _uint8)
}

func (_VRF *VRFCaller) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "typeAndVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

func (_VRF *VRFSession) TypeAndVersion() (string, error) {
	return _VRF.Contract.TypeAndVersion(&_VRF.CallOpts)
}

func (_VRF *VRFCallerSession) TypeAndVersion() (string, error) {
	return _VRF.Contract.TypeAndVersion(&_VRF.CallOpts)
}

func (_VRF *VRFCaller) VrfOutput(opts *bind.CallOpts, input [32]byte, p VRFProof) ([32]byte, error) {
	var out []interface{}
	err := _VRF.contract.Call(opts, &out, "vrfOutput", input, p)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

func (_VRF *VRFSession) VrfOutput(input [32]byte, p VRFProof) ([32]byte, error) {
	return _VRF.Contract.VrfOutput(&_VRF.CallOpts, input, p)
}

func (_VRF *VRFCallerSession) VrfOutput(input [32]byte, p VRFProof) ([32]byte, error) {
	return _VRF.Contract.VrfOutput(&_VRF.CallOpts, input, p)
}

func (_VRF *VRFTransactor) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRF.contract.Transact(opts, "acceptOwnership")
}

func (_VRF *VRFSession) AcceptOwnership() (*types.Transaction, error) {
	return _VRF.Contract.AcceptOwnership(&_VRF.TransactOpts)
}

func (_VRF *VRFTransactorSession) AcceptOwnership() (*types.Transaction, error) {
	return _VRF.Contract.AcceptOwnership(&_VRF.TransactOpts)
}

func (_VRF *VRFTransactor) FulfillRandomWords(opts *bind.TransactOpts, r VRFRequest, p VRFProof) (*types.Transaction, error) {
	return _VRF.contract.Transact(opts, "fulfillRandomWords", r, p)
}

func (_VRF *VRFSession) FulfillRandomWords(r VRFRequest, p VRFProof) (*types.Transaction, error) {
	return _VRF.Contract.FulfillRandomWords(&_VRF.TransactOpts, r, p)
}

func (_VRF *VRFTransactorSession) FulfillRandomWords(r VRFRequest, p VRFProof) (*types.Transaction, error) {
	return _VRF.Contract.FulfillRandomWords(&_VRF.TransactOpts, r, p)
}

func (_VRF *VRFTransactor) KeyGenerated(opts *bind.TransactOpts, kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _VRF.contract.Transact(opts, "keyGenerated", kd)
}

func (_VRF *VRFSession) KeyGenerated(kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _VRF.Contract.KeyGenerated(&_VRF.TransactOpts, kd)
}

func (_VRF *VRFTransactorSession) KeyGenerated(kd KeyDataStructKeyData) (*types.Transaction, error) {
	return _VRF.Contract.KeyGenerated(&_VRF.TransactOpts, kd)
}

func (_VRF *VRFTransactor) NewKeyRequested(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VRF.contract.Transact(opts, "newKeyRequested")
}

func (_VRF *VRFSession) NewKeyRequested() (*types.Transaction, error) {
	return _VRF.Contract.NewKeyRequested(&_VRF.TransactOpts)
}

func (_VRF *VRFTransactorSession) NewKeyRequested() (*types.Transaction, error) {
	return _VRF.Contract.NewKeyRequested(&_VRF.TransactOpts)
}

func (_VRF *VRFTransactor) RequestRandomWords(opts *bind.TransactOpts, seed *big.Int, numWords uint32) (*types.Transaction, error) {
	return _VRF.contract.Transact(opts, "requestRandomWords", seed, numWords)
}

func (_VRF *VRFSession) RequestRandomWords(seed *big.Int, numWords uint32) (*types.Transaction, error) {
	return _VRF.Contract.RequestRandomWords(&_VRF.TransactOpts, seed, numWords)
}

func (_VRF *VRFTransactorSession) RequestRandomWords(seed *big.Int, numWords uint32) (*types.Transaction, error) {
	return _VRF.Contract.RequestRandomWords(&_VRF.TransactOpts, seed, numWords)
}

func (_VRF *VRFTransactor) SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _VRF.contract.Transact(opts, "setConfig", _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_VRF *VRFSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _VRF.Contract.SetConfig(&_VRF.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_VRF *VRFTransactorSession) SetConfig(_signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	return _VRF.Contract.SetConfig(&_VRF.TransactOpts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
}

func (_VRF *VRFTransactor) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _VRF.contract.Transact(opts, "transferOwnership", to)
}

func (_VRF *VRFSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _VRF.Contract.TransferOwnership(&_VRF.TransactOpts, to)
}

func (_VRF *VRFTransactorSession) TransferOwnership(to common.Address) (*types.Transaction, error) {
	return _VRF.Contract.TransferOwnership(&_VRF.TransactOpts, to)
}

func (_VRF *VRFTransactor) Transmit(opts *bind.TransactOpts, arg0 [3][32]byte, arg1 []byte, arg2 [][32]byte, arg3 [][32]byte, arg4 [32]byte) (*types.Transaction, error) {
	return _VRF.contract.Transact(opts, "transmit", arg0, arg1, arg2, arg3, arg4)
}

func (_VRF *VRFSession) Transmit(arg0 [3][32]byte, arg1 []byte, arg2 [][32]byte, arg3 [][32]byte, arg4 [32]byte) (*types.Transaction, error) {
	return _VRF.Contract.Transmit(&_VRF.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

func (_VRF *VRFTransactorSession) Transmit(arg0 [3][32]byte, arg1 []byte, arg2 [][32]byte, arg3 [][32]byte, arg4 [32]byte) (*types.Transaction, error) {
	return _VRF.Contract.Transmit(&_VRF.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

func (_VRF *VRFTransactor) TransmitVRFResponse(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte) (*types.Transaction, error) {
	return _VRF.contract.Transact(opts, "transmitVRFResponse", reportContext, report)
}

func (_VRF *VRFSession) TransmitVRFResponse(reportContext [3][32]byte, report []byte) (*types.Transaction, error) {
	return _VRF.Contract.TransmitVRFResponse(&_VRF.TransactOpts, reportContext, report)
}

func (_VRF *VRFTransactorSession) TransmitVRFResponse(reportContext [3][32]byte, report []byte) (*types.Transaction, error) {
	return _VRF.Contract.TransmitVRFResponse(&_VRF.TransactOpts, reportContext, report)
}

type VRFConfigSetIterator struct {
	Event *VRFConfigSet

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFConfigSetIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFConfigSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFConfigSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFConfigSetIterator) Error() error {
	return it.fail
}

func (it *VRFConfigSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFConfigSet struct {
	PreviousConfigBlockNumber uint32
	ConfigDigest              [32]byte
	ConfigCount               uint64
	Signers                   []common.Address
	Transmitters              []common.Address
	F                         uint8
	OnchainConfig             []byte
	OffchainConfigVersion     uint64
	OffchainConfig            []byte
	Raw                       types.Log
}

func (_VRF *VRFFilterer) FilterConfigSet(opts *bind.FilterOpts) (*VRFConfigSetIterator, error) {

	logs, sub, err := _VRF.contract.FilterLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return &VRFConfigSetIterator{contract: _VRF.contract, event: "ConfigSet", logs: logs, sub: sub}, nil
}

func (_VRF *VRFFilterer) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *VRFConfigSet) (event.Subscription, error) {

	logs, sub, err := _VRF.contract.WatchLogs(opts, "ConfigSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFConfigSet)
				if err := _VRF.contract.UnpackLog(event, "ConfigSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRF *VRFFilterer) ParseConfigSet(log types.Log) (*VRFConfigSet, error) {
	event := new(VRFConfigSet)
	if err := _VRF.contract.UnpackLog(event, "ConfigSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFOwnershipTransferRequestedIterator struct {
	Event *VRFOwnershipTransferRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFOwnershipTransferRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFOwnershipTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFOwnershipTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFOwnershipTransferRequestedIterator) Error() error {
	return it.fail
}

func (it *VRFOwnershipTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFOwnershipTransferRequested struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_VRF *VRFFilterer) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*VRFOwnershipTransferRequestedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _VRF.contract.FilterLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &VRFOwnershipTransferRequestedIterator{contract: _VRF.contract, event: "OwnershipTransferRequested", logs: logs, sub: sub}, nil
}

func (_VRF *VRFFilterer) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *VRFOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _VRF.contract.WatchLogs(opts, "OwnershipTransferRequested", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFOwnershipTransferRequested)
				if err := _VRF.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRF *VRFFilterer) ParseOwnershipTransferRequested(log types.Log) (*VRFOwnershipTransferRequested, error) {
	event := new(VRFOwnershipTransferRequested)
	if err := _VRF.contract.UnpackLog(event, "OwnershipTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFOwnershipTransferredIterator struct {
	Event *VRFOwnershipTransferred

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFOwnershipTransferredIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFOwnershipTransferredIterator) Error() error {
	return it.fail
}

func (it *VRFOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFOwnershipTransferred struct {
	From common.Address
	To   common.Address
	Raw  types.Log
}

func (_VRF *VRFFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*VRFOwnershipTransferredIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _VRF.contract.FilterLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &VRFOwnershipTransferredIterator{contract: _VRF.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

func (_VRF *VRFFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *VRFOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _VRF.contract.WatchLogs(opts, "OwnershipTransferred", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFOwnershipTransferred)
				if err := _VRF.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRF *VRFFilterer) ParseOwnershipTransferred(log types.Log) (*VRFOwnershipTransferred, error) {
	event := new(VRFOwnershipTransferred)
	if err := _VRF.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFRandomWordsFulfilledIterator struct {
	Event *VRFRandomWordsFulfilled

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFRandomWordsFulfilledIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFRandomWordsFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFRandomWordsFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFRandomWordsFulfilledIterator) Error() error {
	return it.fail
}

func (it *VRFRandomWordsFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFRandomWordsFulfilled struct {
	RequestID [32]byte
	Output    []*big.Int
	Success   bool
	ErrorData []byte
	Raw       types.Log
}

func (_VRF *VRFFilterer) FilterRandomWordsFulfilled(opts *bind.FilterOpts, requestID [][32]byte) (*VRFRandomWordsFulfilledIterator, error) {

	var requestIDRule []interface{}
	for _, requestIDItem := range requestID {
		requestIDRule = append(requestIDRule, requestIDItem)
	}

	logs, sub, err := _VRF.contract.FilterLogs(opts, "RandomWordsFulfilled", requestIDRule)
	if err != nil {
		return nil, err
	}
	return &VRFRandomWordsFulfilledIterator{contract: _VRF.contract, event: "RandomWordsFulfilled", logs: logs, sub: sub}, nil
}

func (_VRF *VRFFilterer) WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *VRFRandomWordsFulfilled, requestID [][32]byte) (event.Subscription, error) {

	var requestIDRule []interface{}
	for _, requestIDItem := range requestID {
		requestIDRule = append(requestIDRule, requestIDItem)
	}

	logs, sub, err := _VRF.contract.WatchLogs(opts, "RandomWordsFulfilled", requestIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFRandomWordsFulfilled)
				if err := _VRF.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRF *VRFFilterer) ParseRandomWordsFulfilled(log types.Log) (*VRFRandomWordsFulfilled, error) {
	event := new(VRFRandomWordsFulfilled)
	if err := _VRF.contract.UnpackLog(event, "RandomWordsFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFRandomWordsRequestedIterator struct {
	Event *VRFRandomWordsRequested

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFRandomWordsRequestedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFRandomWordsRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFRandomWordsRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFRandomWordsRequestedIterator) Error() error {
	return it.fail
}

func (it *VRFRandomWordsRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFRandomWordsRequested struct {
	RequestID [32]byte
	Seed      *big.Int
	NumWords  uint32
	Sender    common.Address
	Raw       types.Log
}

func (_VRF *VRFFilterer) FilterRandomWordsRequested(opts *bind.FilterOpts) (*VRFRandomWordsRequestedIterator, error) {

	logs, sub, err := _VRF.contract.FilterLogs(opts, "RandomWordsRequested")
	if err != nil {
		return nil, err
	}
	return &VRFRandomWordsRequestedIterator{contract: _VRF.contract, event: "RandomWordsRequested", logs: logs, sub: sub}, nil
}

func (_VRF *VRFFilterer) WatchRandomWordsRequested(opts *bind.WatchOpts, sink chan<- *VRFRandomWordsRequested) (event.Subscription, error) {

	logs, sub, err := _VRF.contract.WatchLogs(opts, "RandomWordsRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFRandomWordsRequested)
				if err := _VRF.contract.UnpackLog(event, "RandomWordsRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRF *VRFFilterer) ParseRandomWordsRequested(log types.Log) (*VRFRandomWordsRequested, error) {
	event := new(VRFRandomWordsRequested)
	if err := _VRF.contract.UnpackLog(event, "RandomWordsRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type VRFTransmittedIterator struct {
	Event *VRFTransmitted

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *VRFTransmittedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VRFTransmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(VRFTransmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *VRFTransmittedIterator) Error() error {
	return it.fail
}

func (it *VRFTransmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type VRFTransmitted struct {
	ConfigDigest [32]byte
	Epoch        uint32
	Raw          types.Log
}

func (_VRF *VRFFilterer) FilterTransmitted(opts *bind.FilterOpts) (*VRFTransmittedIterator, error) {

	logs, sub, err := _VRF.contract.FilterLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return &VRFTransmittedIterator{contract: _VRF.contract, event: "Transmitted", logs: logs, sub: sub}, nil
}

func (_VRF *VRFFilterer) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *VRFTransmitted) (event.Subscription, error) {

	logs, sub, err := _VRF.contract.WatchLogs(opts, "Transmitted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(VRFTransmitted)
				if err := _VRF.contract.UnpackLog(event, "Transmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_VRF *VRFFilterer) ParseTransmitted(log types.Log) (*VRFTransmitted, error) {
	event := new(VRFTransmitted)
	if err := _VRF.contract.UnpackLog(event, "Transmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type LatestConfigDetails struct {
	ConfigCount  uint32
	BlockNumber  uint32
	ConfigDigest [32]byte
}
type LatestConfigDigestAndEpoch struct {
	ScanLogs     bool
	ConfigDigest [32]byte
	Epoch        uint32
}

func (_VRF *VRF) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _VRF.abi.Events["ConfigSet"].ID:
		return _VRF.ParseConfigSet(log)
	case _VRF.abi.Events["OwnershipTransferRequested"].ID:
		return _VRF.ParseOwnershipTransferRequested(log)
	case _VRF.abi.Events["OwnershipTransferred"].ID:
		return _VRF.ParseOwnershipTransferred(log)
	case _VRF.abi.Events["RandomWordsFulfilled"].ID:
		return _VRF.ParseRandomWordsFulfilled(log)
	case _VRF.abi.Events["RandomWordsRequested"].ID:
		return _VRF.ParseRandomWordsRequested(log)
	case _VRF.abi.Events["Transmitted"].ID:
		return _VRF.ParseTransmitted(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (VRFConfigSet) Topic() common.Hash {
	return common.HexToHash("0x1591690b8638f5fb2dbec82ac741805ac5da8b45dc5263f4875b0496fdce4e05")
}

func (VRFOwnershipTransferRequested) Topic() common.Hash {
	return common.HexToHash("0xed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278")
}

func (VRFOwnershipTransferred) Topic() common.Hash {
	return common.HexToHash("0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0")
}

func (VRFRandomWordsFulfilled) Topic() common.Hash {
	return common.HexToHash("0xa7231a311a37fec0b9b631c5b7d4c4aa3effe5304f25dbfeaf0de676cdd715ba")
}

func (VRFRandomWordsRequested) Topic() common.Hash {
	return common.HexToHash("0xda543d8fd5d52cb865899d85adee45422306c16f47e6e4394f043006ff5cde30")
}

func (VRFTransmitted) Topic() common.Hash {
	return common.HexToHash("0xb04e63db38c49950639fa09d29872f21f5d49d614f3a969d8adf3d4b52e41a62")
}

func (_VRF *VRF) Address() common.Address {
	return _VRF.address
}

type VRFInterface interface {
	Bytes32ToString(opts *bind.CallOpts, s [32]byte) (string, error)

	BytesToString(opts *bind.CallOpts, _bytes []byte) (string, error)

	HashToCurve(opts *bind.CallOpts, m [32]byte, f1 HashToCurveFProof, f2 HashToCurveFProof) (ECCArithmeticG1Point, error)

	LatestConfigDetails(opts *bind.CallOpts) (LatestConfigDetails,

		error)

	LatestConfigDigestAndEpoch(opts *bind.CallOpts) (LatestConfigDigestAndEpoch,

		error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	SKeyID(opts *bind.CallOpts) ([32]byte, error)

	SNonce(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error)

	SProvingKeyHash(opts *bind.CallOpts) ([32]byte, error)

	ToASCII(opts *bind.CallOpts, _uint8 uint8) (uint8, error)

	TypeAndVersion(opts *bind.CallOpts) (string, error)

	VrfOutput(opts *bind.CallOpts, input [32]byte, p VRFProof) ([32]byte, error)

	AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	FulfillRandomWords(opts *bind.TransactOpts, r VRFRequest, p VRFProof) (*types.Transaction, error)

	KeyGenerated(opts *bind.TransactOpts, kd KeyDataStructKeyData) (*types.Transaction, error)

	NewKeyRequested(opts *bind.TransactOpts) (*types.Transaction, error)

	RequestRandomWords(opts *bind.TransactOpts, seed *big.Int, numWords uint32) (*types.Transaction, error)

	SetConfig(opts *bind.TransactOpts, _signers []common.Address, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error)

	Transmit(opts *bind.TransactOpts, arg0 [3][32]byte, arg1 []byte, arg2 [][32]byte, arg3 [][32]byte, arg4 [32]byte) (*types.Transaction, error)

	TransmitVRFResponse(opts *bind.TransactOpts, reportContext [3][32]byte, report []byte) (*types.Transaction, error)

	FilterConfigSet(opts *bind.FilterOpts) (*VRFConfigSetIterator, error)

	WatchConfigSet(opts *bind.WatchOpts, sink chan<- *VRFConfigSet) (event.Subscription, error)

	ParseConfigSet(log types.Log) (*VRFConfigSet, error)

	FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*VRFOwnershipTransferRequestedIterator, error)

	WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *VRFOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferRequested(log types.Log) (*VRFOwnershipTransferRequested, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*VRFOwnershipTransferredIterator, error)

	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *VRFOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseOwnershipTransferred(log types.Log) (*VRFOwnershipTransferred, error)

	FilterRandomWordsFulfilled(opts *bind.FilterOpts, requestID [][32]byte) (*VRFRandomWordsFulfilledIterator, error)

	WatchRandomWordsFulfilled(opts *bind.WatchOpts, sink chan<- *VRFRandomWordsFulfilled, requestID [][32]byte) (event.Subscription, error)

	ParseRandomWordsFulfilled(log types.Log) (*VRFRandomWordsFulfilled, error)

	FilterRandomWordsRequested(opts *bind.FilterOpts) (*VRFRandomWordsRequestedIterator, error)

	WatchRandomWordsRequested(opts *bind.WatchOpts, sink chan<- *VRFRandomWordsRequested) (event.Subscription, error)

	ParseRandomWordsRequested(log types.Log) (*VRFRandomWordsRequested, error)

	FilterTransmitted(opts *bind.FilterOpts) (*VRFTransmittedIterator, error)

	WatchTransmitted(opts *bind.WatchOpts, sink chan<- *VRFTransmitted) (event.Subscription, error)

	ParseTransmitted(log types.Log) (*VRFTransmitted, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
