// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	log "github.com/smartcontractkit/chainlink/core/services/log"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// FindConsumedLogs provides a mock function with given fields: fromBlockNum, toBlockNum
func (_m *ORM) FindConsumedLogs(fromBlockNum int64, toBlockNum int64) ([]log.LogBroadcast, error) {
	ret := _m.Called(fromBlockNum, toBlockNum)

	var r0 []log.LogBroadcast
	if rf, ok := ret.Get(0).(func(int64, int64) []log.LogBroadcast); ok {
		r0 = rf(fromBlockNum, toBlockNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]log.LogBroadcast)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(fromBlockNum, toBlockNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkBroadcastConsumed provides a mock function with given fields: e, blockHash, blockNumber, logIndex, jobID
func (_m *ORM) MarkBroadcastConsumed(e sqlx.ExecerContext, blockHash common.Hash, blockNumber uint64, logIndex uint, jobID log.JobIdSelect) error {
	ret := _m.Called(e, blockHash, blockNumber, logIndex, jobID)

	var r0 error
	if rf, ok := ret.Get(0).(func(sqlx.ExecerContext, common.Hash, uint64, uint, log.JobIdSelect) error); ok {
		r0 = rf(e, blockHash, blockNumber, logIndex, jobID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WasBroadcastConsumed provides a mock function with given fields: q, blockHash, logIndex, jobID
func (_m *ORM) WasBroadcastConsumed(q sqlx.QueryerContext, blockHash common.Hash, logIndex uint, jobID log.JobIdSelect) (bool, error) {
	ret := _m.Called(q, blockHash, logIndex, jobID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(sqlx.QueryerContext, common.Hash, uint, log.JobIdSelect) bool); ok {
		r0 = rf(q, blockHash, logIndex, jobID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sqlx.QueryerContext, common.Hash, uint, log.JobIdSelect) error); ok {
		r1 = rf(q, blockHash, logIndex, jobID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
